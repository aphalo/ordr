% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fortify.r
\name{fortify}
\alias{fortify}
\alias{fortify.tbl_ord}
\alias{fortify_coord}
\alias{fortify_u}
\alias{fortify_v}
\alias{tidy.tbl_ord}
\title{Fortify a \code{tbl_ord} for plotting}
\usage{
\method{fortify}{tbl_ord}(model, data, ..., .matrix = "uv",
  .supplement = TRUE, include = "all")

fortify_coord(model)

fortify_u(model, include = "all")

fortify_v(model, include = "all")

\method{tidy}{tbl_ord}(x, ..., .matrix = "uv", .supplement = TRUE,
  include = "all")
}
\arguments{
\item{model, x}{A \code{[tbl_ord]} object.}

\item{data}{Ignored.}

\item{...}{Additional arguments received from \code{fortify()} or \code{tidy()};
ignored.}

\item{.matrix}{A character string matching one of several indicators for one
or both matrices in a matrix decomposition used for ordination. The
standard values are \code{"u"}, \code{"v"}, and \code{"uv"}.}

\item{.supplement}{Logical; whether to include
\link[=supplementation]{supplementary} points.}

\item{include}{Character matched to \code{"coordinates"}, \code{"shared"}, or \code{"all"};
whether the fortified data frame should include only the ordination
coordinates or also augmented case and variable data, and, if the latter,
whether only shared fields or all from both.}
}
\description{
These methods of \code{\link[ggplot2:fortify]{ggplot2::fortify()}} and \code{\link[generics:tidy]{generics::tidy()}}
convert a \code{[tbl_ord]} object to a \link[tibble:tbl_df]{tbl_df} object.
}
\details{
The \code{fortify()} and \code{tidy()} methods for \code{tbl_ord} objects produce the same
output, a \link[tibble:tibble]{tibble} obtained by binding columns obtained via
\code{\link[=accessors]{get_*()}}, \code{\link[=annotation]{annotation_*()}}, and
\code{\link[=augmentation]{augmentation_*}}, respectively.

If any augmented variables are included
(i.e. unless \code{include = "coordinates"}),
then the tibble is assigned a \code{"coordinates"} attribute
whose value is obtained via \code{\link[=get_coord]{get_coord()}}.
(Note that this attribute will not be printed with the tibble.)
}
\examples{
# a 'tbl_ord' object
pca <- as_tbl_ord(prcomp(USArrests))
pca <- confer_inertia(pca, "symmetric")
# fortify/tidy a 'tbl_ord' object
fortify(pca)
tidy(pca)
# scores or loadings plots using `ggplot()`
ggplot(pca, aes(x = PC1, y = PC2), .matrix = "u") + geom_point()
ggplot(pca, aes(x = PC1, y = PC2), .matrix = "v") + geom_point()
# biplot using `ggplot()`
ggplot(pca, aes(x = PC1, y = PC2)) + geom_point(aes(color = .matrix))
# fortify to coordinates & scree plot using `ggplot()`
fortify(pca, .matrix = "coord")
ggplot(pca, .matrix = "coord", aes(x = .name, y = .sdev^2)) +
  geom_bar(stat = "identity")
ggplot(pca, .matrix = "coord", aes(x = .name, y = .prop_var)) +
  geom_bar(stat = "identity")
# `fortify()` being called internally by `ggbiplot()`
ggbiplot(pca) + geom_v_vector() + geom_u_point()
# Linear discriminant analysis of Reaven & Miller diabetes data
head(heplots::Diabetes)
diabetes_lda <- MASS::lda(group ~ ., heplots::Diabetes)
print(diabetes_lda)
as_tbl_ord(diabetes_lda) \%>\%
  augment() \%>\%
  mutate_u(discriminant = ifelse(! .supplement, "centroid", "case")) \%>\%
  print() -> diabetes_lda
ggbiplot(diabetes_lda) +
  theme_bw() +
  geom_u_point(aes(shape = .grouping, size = discriminant), alpha = .5) +
  geom_v_axis(color = "#888888") +
  geom_v_text_radiate(aes(label = .name)) +
  scale_color_brewer(type = "qual", palette = 2) +
  ggtitle("Column-standardized LDA biplot of Reaven & Miller diabetes data")
diabetes_lda \%>\%
  confer_inertia("symmetric") \%>\%
  #ggbiplot(.supplement = FALSE) +
  ggbiplot() +
  theme_bw() +
  #geom_u_point(aes(shape = .grouping)) +
  geom_u_point(
    aes(shape = .grouping), data = subset(tidy(diabetes_lda), ! .supplement)
  ) +
  geom_v_vector(color = "#888888") +
  geom_v_text_radiate(aes(label = .name), size = 3) +
  ggtitle("Symmetric LDA biplot of Reaven & Miller diabetes data")
}
