% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/stat-ellipse.r
\docType{data}
\name{ggbiplot-ellipse}
\alias{ggbiplot-ellipse}
\alias{StatUEllipse}
\alias{StatVEllipse}
\alias{stat_u_ellipse}
\alias{stat_v_ellipse}
\title{Compute normal confidence ellipses for ordination factors}
\format{An object of class \code{StatUEllipse} (inherits from \code{StatEllipse}, \code{Stat}, \code{ggproto}, \code{gg}) of length 2.}
\usage{
stat_u_ellipse(mapping = NULL, data = NULL, geom = "path",
  position = "identity", show.legend = NA, inherit.aes = TRUE, ...,
  type = "t", level = 0.95, segments = 51)

stat_v_ellipse(mapping = NULL, data = NULL, geom = "path",
  position = "identity", show.legend = NA, inherit.aes = TRUE, ...,
  type = "t", level = 0.95, segments = 51)
}
\arguments{
\item{mapping}{Set of aesthetic mappings created by \code{\link[=aes]{aes()}} or
\code{\link[=aes_]{aes_()}}. If specified and \code{inherit.aes = TRUE} (the
default), it is combined with the default mapping at the top level of the
plot. You must supply \code{mapping} if there is no plot mapping.}

\item{data}{The data to be displayed in this layer. There are three
options:

If \code{NULL}, the default, the data is inherited from the plot
data as specified in the call to \code{\link[=ggplot]{ggplot()}}.

A \code{data.frame}, or other object, will override the plot
data. All objects will be fortified to produce a data frame. See
\code{\link[=fortify]{fortify()}} for which variables will be created.

A \code{function} will be called with a single argument,
the plot data. The return value must be a \code{data.frame.}, and
will be used as the layer data.}

\item{geom}{The geometric object to use display the data}

\item{position}{Position adjustment, either as a string, or the result of
a call to a position adjustment function.}

\item{show.legend}{logical. Should this layer be included in the legends?
\code{NA}, the default, includes if any aesthetics are mapped.
\code{FALSE} never includes, and \code{TRUE} always includes.
It can also be a named logical vector to finely select the aesthetics to
display.}

\item{inherit.aes}{If \code{FALSE}, overrides the default aesthetics,
rather than combining with them. This is most useful for helper functions
that define both data and aesthetics and shouldn't inherit behaviour from
the default plot specification, e.g. \code{\link[=borders]{borders()}}.}

\item{...}{Additional arguments passed to \code{\link[ggplot2]{layer}}.}

\item{type}{The type of ellipse.
The default \code{"t"} assumes a multivariate t-distribution, and
\code{"norm"} assumes a multivariate normal distribution.
\code{"euclid"} draws a circle with the radius equal to \code{level},
representing the euclidean distance from the center.
This ellipse probably won't appear circular unless \code{coord_fixed()} is applied.}

\item{level}{The confidence level at which to draw an ellipse (default is 0.95),
or, if \code{type="euclid"}, the radius of the circle to be drawn.}

\item{segments}{The number of segments to be used in drawing the ellipse.}
}
\description{
These ordination stats are adapted from \code{\link[ggplot2]{stat_ellipse}}.
}
\section{Biplot layers}{

\code{\link{ggbiplot}} uses \code{\link[ggplot2]{fortify}} internally to 
produce a single data frame with a \code{.matrix} column distinguishing the 
subjects (\code{"u"}) and variables (\code{"v"}). The stat layers 
\code{stat_u} and \code{stat_v} simply filter the data frame to one of these 
two.

The geom layers \code{geom_u_*} and \code{geom_v_*} call the corresponding
stat in order to render plot elements for the corresponding matrix \eqn{U} or
\eqn{V}. \code{geom_biplot_*} selects a default matrix based on common
practice, e.g. \eqn{U} for points and \eqn{V} for arrows.
}

\examples{
data(iris)

iris[, -5] \%>\%
  prcomp(scale = TRUE) \%>\%
  as_tbl_ord() \%>\%
  mutate_u(species = iris$Species) \%>\%
  mutate_v(measure = gsub("\\\\.", " ", tolower(names(iris)[-5]))) \%>\%
  print() -> iris_pca

# default confidence ellipses
iris_pca \%>\%
  ggbiplot(aes(color = species)) +
  theme_bw() +
  scale_color_brewer(type = "qual", palette = 2) +
  geom_u_point() +
  stat_u_ellipse() +
  geom_v_vector(color = "#222222")

# consistently color and fill
# NOTE: 'color' and 'fill' don't match
iris_pca \%>\%
  ggbiplot(aes(color = species)) +
  theme_bw() +
  scale_color_brewer(type = "qual", palette = 2) +
  geom_u_point() +
  geom_polygon(aes(fill = species), alpha = .25, stat = "u_ellipse") +
  geom_v_vector(color = "#222222")

# symmetric biplot
iris_pca \%>\%
  ggbiplot(aes(color = species), sec.axes = "v", scale.factor = 3) +
  theme_bw() +
  scale_color_brewer(type = "qual", palette = 2) +
  geom_u_point() +
  stat_u_ellipse() +
  geom_v_vector(color = "#222222") +
  geom_v_text_repel(aes(label = measure), color = "#222222")
}
\keyword{datasets}
