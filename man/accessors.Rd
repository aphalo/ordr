% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ord-accessors.r
\name{accessors}
\alias{accessors}
\alias{recover_u}
\alias{recover_v}
\alias{recover_factor}
\alias{recover_u.default}
\alias{recover_v.default}
\alias{recover_u.data.frame}
\alias{recover_v.data.frame}
\alias{get_u}
\alias{get_v}
\alias{get_factor}
\alias{as.matrix.tbl_ord}
\alias{recover_inertia}
\alias{recover_inertia.default}
\alias{recover_coord}
\alias{recover_coord.default}
\alias{recover_coord.data.frame}
\alias{get_coord}
\alias{dim.tbl_ord}
\alias{dim_u}
\alias{dim_v}
\alias{dim_factor}
\title{Access factors, coordinates, and metadata from ordination objects}
\usage{
recover_u(x)

recover_v(x)

recover_factor(x, .matrix)

\method{recover_u}{default}(x)

\method{recover_v}{default}(x)

\method{recover_u}{data.frame}(x)

\method{recover_v}{data.frame}(x)

get_u(x, align = TRUE)

get_v(x, align = TRUE)

get_factor(x, .matrix, align = TRUE)

\method{as.matrix}{tbl_ord}(x, ..., .matrix, align = TRUE)

recover_inertia(x)

\method{recover_inertia}{default}(x)

recover_coord(x)

\method{recover_coord}{default}(x)

\method{recover_coord}{data.frame}(x)

get_coord(x, align = TRUE)

\method{dim}{tbl_ord}(x)

dim_u(x)

dim_v(x)

dim_factor(x, .matrix)
}
\arguments{
\item{x}{A \code{[tbl_ord]}, or an ordination object coercible to one.}

\item{.matrix}{A character string matching one of several indicators for one
or both matrices in a matrix decomposition used for ordination. The
standard values are \code{"u"}, \code{"v"}, and \code{"uv"}.}

\item{align}{Logical; whether to align the matrix factors and coordinates
according to an \code{"align"} matrix attribute.}

\item{...}{Additional arguments from \code{\link[base:as.matrix]{base::as.matrix()}}; ignored.}
}
\description{
These functions return information about the matrix
factorization underlying an ordination.
}
\details{
The \code{recover_*()} functions extract one or both of the matrix factors
\eqn{U,V} that constitute the original ordination. These are interpreted as
the case scores (\eqn{U}) and the variable loadings (\eqn{V}). The \code{get_*()}
functions optionally (and by default) apply any alignment stored as the
\code{"align"} attribute (see \link{alignment}). Only the \code{recover_*()} functions are
generics that require methods for each ordination class.

\code{get_coord()} retrieves the names of the coordinates shared by \eqn{U} and
\eqn{V}, on which the original data were ordinated, and \code{dim.tbl_ord()}
retrieves their number, the rank of the ordination. The outer dimensions of
the matrix decomposition are returned by \code{dim_u()} and \code{dim_v()}.
}
\examples{
# Multidimensional scaling of country differences and regression of attributes
# Reproduce Exhibit 4.2 in Greenacre (2010)
country_differences \%>\%
  cmdscale(k = 2) \%>\%
  as_tbl_ord() \%>\%
  print() -> differences_cmds
differences_plot <- differences_cmds \%>\%
  ggbiplot(aes(x = 1, y = 2, label = .name)) +
  geom_v_text()
differences_plot
# Reproduce Exhibit 4.5 in Greenacre (2010)
lm(country_attributes ~ get_u(differences_cmds)) \%>\%
  as_tbl_ord() \%>\%
  print() -> attributes_fit
differences_plot +
  geom_v_vector(data = attributes_fit) +
  geom_v_text_radiate(data = attributes_fit, hjust = .3)
# Confer PCA weights and inertia between cases and variables
country_attributes \%>\%
  prcomp() \%>\%
  as_tbl_ord() \%>\%
  print() -> attributes_pca
# form biplot
attributes_pca \%>\%
  ggbiplot(
    aes(label = .name),
    sec.axes = "v", scale.factor = dim_v(attributes_pca)
  ) +
  theme_bw() + theme(panel.grid = element_blank()) +
  geom_u_text(aes(x = PC1, y = PC2), color = "seagreen") +
  geom_v_vector(aes(x = PC1, y = PC2), color = "darkred") +
  geom_v_text_repel(aes(x = PC1, y = PC2), color = "darkred")
# covariance biplot
attributes_pca \%>\%
  confer_inertia(0) \%>\%
  ggbiplot(
    aes(label = .name),
    sec.axes = "u", scale.factor = dim_u(attributes_pca)
  ) +
  theme_bw() + theme(panel.grid = element_blank()) +
  geom_u_text(aes(x = PC1, y = PC2), color = "seagreen") +
  geom_v_vector(aes(x = PC1, y = PC2), color = "darkred") +
  geom_v_text_repel(aes(x = PC1, y = PC2), color = "darkred")
}
