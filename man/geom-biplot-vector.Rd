% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/geom-vector.r
\docType{data}
\name{geom-biplot-vector}
\alias{geom-biplot-vector}
\alias{GeomVector}
\alias{geom_vector}
\alias{geom_u_vector}
\alias{geom_v_vector}
\alias{geom_biplot_vector}
\title{Render vectors from origin to ordinates}
\format{
An object of class \code{GeomVector} (inherits from \code{GeomSegment}, \code{Geom}, \code{ggproto}, \code{gg}) of length 4.
}
\usage{
geom_vector(
  mapping = NULL,
  data = NULL,
  stat = "identity",
  position = "identity",
  arrow = default_arrow,
  ...,
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = TRUE
)

geom_u_vector(
  mapping = NULL,
  data = NULL,
  stat = "identity",
  position = "identity",
  arrow = default_arrow,
  ...,
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = TRUE
)

geom_v_vector(
  mapping = NULL,
  data = NULL,
  stat = "identity",
  position = "identity",
  arrow = default_arrow,
  ...,
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = TRUE
)

geom_biplot_vector(
  mapping = NULL,
  data = NULL,
  stat = "identity",
  position = "identity",
  .matrix = "v",
  arrow = default_arrow,
  ...,
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = TRUE
)
}
\arguments{
\item{mapping}{Set of aesthetic mappings created by \code{\link[ggplot2:aes]{aes()}} or
\code{\link[ggplot2:aes_]{aes_()}}. If specified and \code{inherit.aes = TRUE} (the
default), it is combined with the default mapping at the top level of the
plot. You must supply \code{mapping} if there is no plot mapping.}

\item{data}{The data to be displayed in this layer. There are three
options:

If \code{NULL}, the default, the data is inherited from the plot
data as specified in the call to \code{\link[ggplot2:ggplot]{ggplot()}}.

A \code{data.frame}, or other object, will override the plot
data. All objects will be fortified to produce a data frame. See
\code{\link[ggplot2:fortify]{fortify()}} for which variables will be created.

A \code{function} will be called with a single argument,
the plot data. The return value must be a \code{data.frame}, and
will be used as the layer data. A \code{function} can be created
from a \code{formula} (e.g. \code{~ head(.x, 10)}).}

\item{stat}{The statistical transformation to use on the data for this
layer, as a string.}

\item{position}{Position adjustment, either as a string, or the result of
a call to a position adjustment function.}

\item{arrow}{Specification for arrows, as created by \code{\link[grid:arrow]{grid::arrow()}}, or else
\code{NULL} for no arrows.}

\item{...}{Additional arguments passed to \code{\link[ggplot2:layer]{ggplot2::layer()}}.}

\item{na.rm}{Passed to \code{\link[ggplot2:layer]{ggplot2::layer()}}.}

\item{show.legend}{logical. Should this layer be included in the legends?
\code{NA}, the default, includes if any aesthetics are mapped.
\code{FALSE} never includes, and \code{TRUE} always includes.
It can also be a named logical vector to finely select the aesthetics to
display.}

\item{inherit.aes}{If \code{FALSE}, overrides the default aesthetics,
rather than combining with them. This is most useful for helper functions
that define both data and aesthetics and shouldn't inherit behaviour from
the default plot specification, e.g. \code{\link[ggplot2:borders]{borders()}}.}

\item{.matrix}{A character string matching one of several indicators for one
or both matrices in a matrix decomposition used for ordination. The
standard values are \code{"u"}, \code{"v"}, and \code{"uv"}.}
}
\description{
\verb{geom_*_vector()} renders arrows from the origin to the position
of each case or variable.
}
\section{Biplot layers}{

\code{\link[=ggbiplot]{ggbiplot()}} uses \code{\link[ggplot2:fortify]{ggplot2::fortify()}} internally to produce a single data
frame with a \code{.matrix} column distinguishing the subjects (\code{"u"}) and
variables (\code{"v"}). The stat layers \code{stat_u()} and \code{stat_v()} simply filter
the data frame to one of these two.

The geom layers \verb{geom_u_*()} and \verb{geom_v_*()} call the corresponding stat in
order to render plot elements for the corresponding matrix \eqn{U} or
\eqn{V}. \verb{geom_biplot_*()} selects a default matrix based on common practice,
e.g. \eqn{U} for points and \eqn{V} for arrows.
}

\section{Aesthetics}{

\verb{geom_*_vector()} understands the following aesthetics (required aesthetics
are in bold):
\itemize{
\item \strong{\code{x}}
\item \strong{\code{y}}
\item \code{alpha}
\item \code{colour}
\item \code{linetype}
\item \code{size}
\item \code{group}
}
}

\examples{
# Scaled PCA of Anderson iris data with ranges and confidence intervals
iris[, -5] \%>\%
  prcomp(scale = TRUE) \%>\%
  as_tbl_ord() \%>\%
  confer_inertia(1) \%>\%
  mutate_u(species = iris$Species) \%>\%
  print() -> iris_pca
iris_pca \%>\%
  ggbiplot(aes(color = species)) +
  theme_bw() +
  scale_color_brewer(type = "qual", palette = 2) +
  geom_u_lineranges(fun.data = mean_sdl, size = .75) +
  geom_u_point(alpha = .5) +
  geom_v_vector(color = "#444444") +
  ggtitle(
    "Row-principal PCA biplot of Anderson iris data",
    "Ranges 2 sample standard deviations from centroids"
  )
iris_pca \%>\%
  ggbiplot(aes(color = species)) +
  theme_bw() +
  scale_color_brewer(type = "qual", palette = 2) +
  geom_u_lineranges(
    fun.data = mean_cl_boot, fun.args = list(conf.int = .99),
    size = .75
  ) +
  geom_u_point(alpha = .5) +
  geom_v_vector(color = "#444444") +
  ggtitle(
    "Row-principal PCA biplot of Anderson iris data",
    "99\% confidence intervals based on nonparametric bootstrap sampling"
  )
# Align an MDS ordination to a PCA ordination
data(country_differences)
country_differences \%>\%
  cmdscale(k = 2) \%>\%
  as_tbl_ord() \%>\%
  print() -> differences_cmds
country_differences \%>\%
  prcomp() \%>\%
  as_tbl_ord() \%>\%
  print() -> differences_pca
# negate PCA cases to MDS coordinates
differences_cmds \%>\%
  negate_to(differences_pca, "u") \%>\%
  print() -> differences_align_u
plot(gridExtra::arrangeGrob(grobs = list(
  ggbiplot(differences_cmds) + geom_u_point(),
  ggbiplot(differences_pca) + geom_u_point(),
  ggbiplot(differences_align_u) + geom_u_point()
), ncol = 3))
# negate PCA variables to MDS coordinates
differences_cmds \%>\%
  negate_to(differences_pca, "v") \%>\%
  print() -> differences_align_v
plot(gridExtra::arrangeGrob(grobs = list(
  ggbiplot(differences_cmds) + geom_v_vector(),
  ggbiplot(differences_pca) + geom_v_vector(),
  ggbiplot(differences_align_v) + geom_v_vector()
), ncol = 3))
}
\keyword{datasets}
