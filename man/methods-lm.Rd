% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/methods-lm.r
\name{methods-lm}
\alias{methods-lm}
\alias{as_tbl_ord.lm}
\alias{reconstruct.lm}
\alias{recover_u.lm}
\alias{recover_v.lm}
\alias{recover_coord.lm}
\alias{augmentation_u.lm}
\alias{augmentation_v.lm}
\alias{augmentation_coord.lm}
\alias{permute_to.lm}
\alias{augmentation_u.glm}
\alias{recover_u.mlm}
\alias{recover_v.mlm}
\alias{recover_coord.mlm}
\alias{augmentation_u.mlm}
\alias{augmentation_v.mlm}
\alias{augmentation_coord.mlm}
\title{Functionality for linear model objects}
\usage{
\method{as_tbl_ord}{lm}(x)

\method{reconstruct}{lm}(x)

\method{recover_u}{lm}(x)

\method{recover_v}{lm}(x)

\method{recover_coord}{lm}(x)

\method{augmentation_u}{lm}(x)

\method{augmentation_v}{lm}(x)

\method{augmentation_coord}{lm}(x)

\method{permute_to}{lm}(x, y, ..., .matrix)

\method{augmentation_u}{glm}(x)

\method{recover_u}{mlm}(x)

\method{recover_v}{mlm}(x)

\method{recover_coord}{mlm}(x)

\method{augmentation_u}{mlm}(x)

\method{augmentation_v}{mlm}(x)

\method{augmentation_coord}{mlm}(x)
}
\arguments{
\item{x}{An ordination object.}

\item{y}{A matrix or an ordination object.}

\item{...}{Additional elements of a custom \code{tbl_ord}.}

\item{.matrix}{A character string matching one of several indicators for one
or both matrices in a matrix decomposition used for ordination. The
standard values are \code{"u"}, \code{"v"}, and \code{"uv"}.}
}
\description{
These methods extract data from, and attribute new data to, objects of class
\code{"lm"}, \code{"glm"}, and \code{"mlm"}.
}
\examples{
data(bioenv)

# reproduce Exhibit 2.3 in Greenacre (2010)

# standardize two predictors
bioenv <- dplyr::mutate(
  bioenv,
  x = (Depth - mean(Depth)) / sd(Depth),
  y = (Pollution - mean(Pollution)) / sd(Pollution)
)

# linear regression setup
(m <- lm(data = bioenv, formula = d ~ x + y))
(b <- as_tbl_ord(m))
(d <- tidy(b))

# contributions of predictors to explained variance
print(augmentation_coord(b))

# basic linear regression biplot
gg <- ggbiplot(b, aes(x = x, y = y))
gg +
  geom_u_point() +
  geom_v_vector()
# same biplot using default matrices for each layer
gg +
  geom_biplot_point() +
  geom_biplot_vector()
# same biplot with tick marks for sole axis
gg +
  geom_u_point() +
  geom_v_vector() +
  geom_v_ticks(ids = 1, by = 5)
# same biplot with isolines for sole axis
gg +
  geom_u_point() +
  geom_v_vector() +
  geom_v_isolines(ids = 1, by = 5)

# shade points by expected species prevalence and darken outliers
ggbiplot(d, aes(x = x, y = y, color = .fit, alpha = .wt.res ^ 2)) +
  theme_bw() +
  scale_color_distiller(type = "div", palette = 1) +
  scale_alpha_continuous(range = c(1/3, 1)) +
  geom_u_point() +
  geom_v_vector() +
  geom_v_isolines(ids = 1, by = 5)

data(bioenv)

# reproduce Exhibit 2.5 in Greenacre (2010)

# standardize all (numeric) variables
bioenv_std <- dplyr::mutate_if(bioenv, is.numeric, scale)

# multiple linear regression setup
resp <- as.matrix(dplyr::select(bioenv_std, a:e))
pred <- as.matrix(dplyr::select(bioenv_std, x = Depth, y = Pollution))
(m <- lm(resp ~ pred + 0))
(b <- as_tbl_ord(m))

# multiple linear regression biplot
ggbiplot(b, aes(label = .name)) +
  theme_bw() +
  geom_u_text(color = "darkgreen") +
  geom_v_vector(color = "brown4") +
  geom_v_text_radiate(color = "brown4")

# reproduce Exhibit 3.2 in Greenacre (2010)

# standardize the predictors and fourth-root transform the response variables
bioenv_4rt <- dplyr::mutate_at(bioenv, dplyr::vars(a:e), dplyr::funs(. ^ (1/4)))
bioenv_4rt <- dplyr::mutate_at(bioenv_4rt, dplyr::vars(Pollution:Depth), scale)

# multiple linear regression setup
resp <- as.matrix(dplyr::select(bioenv_4rt, a:e))
pred <- as.matrix(dplyr::select(bioenv_4rt, x = Depth, y = Pollution))
(m <- lm(resp ~ pred))
(b <- as_tbl_ord(m))

# multiple linear regression biplot
ggbiplot(b, aes(x = x, y = y, label = .name)) +
  theme_bw() +
  geom_u_text(color = "darkgreen") +
  geom_v_vector(color = "brown4") +
  geom_v_text_radiate(color = "brown4")

# multiple linear regression biplot
ggbiplot(b, aes(x = x, y = y, label = .name)) +
  theme_bw() +
  geom_u_text(color = "darkgreen") +
  geom_v_vector(color = "brown4") +
  geom_v_text_radiate(color = "brown4")

# reproduce (3.2) in Greenacre (2010)

# standardize the predictors
bioenv_pois <- dplyr::mutate(bioenv, x = scale(Depth), y = scale(Pollution))

# single generalized linear regression setup
(m <- glm(d ~ x + y, "poisson", bioenv_pois))
(b <- as_tbl_ord(m))

# single generalized linear regression biplot
ggbiplot(b, aes(x = x, y = y, label = .name)) +
  theme_bw() +
  geom_u_text(color = "darkgreen") +
  geom_v_vector(color = "brown4") +
  geom_v_text_radiate(color = "brown4")

# reproduce (3.4) and Exhibit 3.6 in Greenacre (2010)

# standardize the predictors and binarize the count responses
bioenv_bin <- dplyr::mutate_at(bioenv, dplyr::vars(a:e), as.logical)
bioenv_bin <- dplyr::mutate(bioenv_bin, x = scale(Depth), y = scale(Pollution))

# multiple generalized linear regression setup
#resp <- as.matrix(dplyr::select(bioenv_std, a:e))
#pred <- as.matrix(dplyr::select(bioenv_std, x = Depth, y = Pollution))
#(m <- glm(resp ~ pred, "binomial"))

# single generalized linear regression setup
(m <- glm(d ~ x + y, "binomial", bioenv_bin))
(b <- as_tbl_ord(m))

# check link function
family(b)$linkfun
family(b)$linkinv
# can/should `family()` be passed through `ggplot()` and on to `geom_*()`?

# single generalized linear regression biplot
# ('intercept' aesthetic is vital for linking GLM parameter to coordinates)
ggbiplot(b, aes(x = x, y = y, intercept = `(Intercept)`, label = .name)) +
  theme_bw() +
  geom_u_text(color = "darkgreen") +
  geom_v_vector(color = "brown4") +
  geom_v_text_radiate(color = "brown4") +
  geom_v_isolines(family = binomial(), by = .05) +
  ylim(c(-2.7, 2.7))
}
