% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/biplot-gg.r
\name{ggbiplot}
\alias{ggbiplot}
\alias{ord_aes}
\title{Biplots following the grammar of graphics}
\usage{
ggbiplot(
  ordination = NULL,
  mapping = aes(x = 1, y = 2),
  xlim = NULL,
  ylim = NULL,
  expand = TRUE,
  clip = "on",
  axis.percents = TRUE,
  sec.axes = NULL,
  scale.factor = NULL,
  scale_rows = NULL,
  scale_cols = NULL,
  ...
)

ord_aes(ordination, ...)
}
\arguments{
\item{ordination}{A \link{tbl_ord}.}

\item{mapping}{List of default aesthetic mappings to use for the biplot. The
default assigns the first two coordinates to the aesthetics \code{x} and \code{y}.
Other assignments must be supplied in each layer added to the plot.}

\item{xlim}{Limits for the x and y axes.}

\item{ylim}{Limits for the x and y axes.}

\item{expand}{If \code{TRUE}, the default, adds a small expansion factor to
the limits to ensure that data and axes don't overlap. If \code{FALSE},
limits are taken exactly from the data or \code{xlim}/\code{ylim}.}

\item{clip}{Should drawing be clipped to the extent of the plot panel? A
setting of \code{"on"} (the default) means yes, and a setting of \code{"off"}
means no. In most cases, the default of \code{"on"} should not be changed,
as setting \code{clip = "off"} can cause unexpected results. It allows
drawing of data points anywhere on the plot, including in the plot margins. If
limits are set via \code{xlim} and \code{ylim} and some data points fall outside those
limits, then those data points may show up in places such as the axes, the
legend, the plot title, or the plot margins.}

\item{axis.percents}{Whether to concatenate default axis labels with inertia
percentages.}

\item{sec.axes}{Matrix factor character to specify a secondary set of axes.}

\item{scale.factor}{Numeric value used to scale the secondary axes against
the primary axes; ignored if \code{sec.axes} is not specified.}

\item{scale_rows, scale_cols}{Either the character name of a numeric variable
in \code{get_*(ordination)} or a numeric vector of length
\code{nrow(get_*(ordination))}, used to scale the coordinates of the matrix
factors.}

\item{...}{Additional arguments passed to \code{\link[ggplot2:fortify]{ggplot2::fortify()}}; see
\code{\link[=fortify.tbl_ord]{fortify.tbl_ord()}}.}
}
\description{
Build a biplot visualization from ordination data wrapped as a
\link{tbl_ord} object.
}
\details{
\code{ggbiplot()} produces a \link[ggplot2:ggplot]{ggplot} object from a \link{tbl_ord}
object \code{ordination}. The baseline object is the default unadorned
\code{"ggplot"}-class object \code{p} with the following differences from what
\code{\link[ggplot2:ggplot]{ggplot2::ggplot()}} returns:
\itemize{
\item \code{p$mapping} is augmented with \code{.matrix = .matrix}, which expects either
\code{.matrix = "rows"} or \code{.matrix = "cols"} from the biplot.
\item \code{p$coordinates} is defaulted to \code{\link[ggplot2:coord_fixed]{ggplot2::coord_equal()}} in order to
faithfully render the geometry of an ordination. The optional parameters
\code{xlim}, \code{ylim}, \code{expand}, and \code{clip} are passed to \code{coord_equal()} and
default to its \strong{ggplot2} defaults.
\item When \code{x} or \code{y} are mapped to coordinates of \code{ordination}, and if
\code{axis.percents} is \code{TRUE}, \code{p$labels$x} or \code{p$labels$y} are defaulted to the
coordinate names concatenated with the percentages of \link[=conference]{inertia}
captured by the coordinates.
\item \code{p} is assigned the class \code{"ggbiplot"} in addition to \code{"ggplot"}. This
serves no functional purpose currently.
}

Furthermore, the user may feed single integer values to the \code{x} and \code{y}
aesthetics, which will be interpreted as the corresponding coordinates in the
ordination.

\code{ord_aes()} is a convenience function that generates a full-rank set of
coordinate aesthetics \code{.coord1}, \code{.coord2}, etc. mapped to the
shared coordinates of the ordination object, along with any additional
aesthetics that are processed internally by \code{\link[ggplot2:aes]{ggplot2::aes()}}.
}
\section{Biplot layers}{

\code{\link[=ggbiplot]{ggbiplot()}} uses \code{\link[ggplot2:fortify]{ggplot2::fortify()}} internally to produce a single data
frame with a \code{.matrix} column distinguishing the subjects (\code{"rows"}) and
variables (\code{"cols"}). The stat layers \code{stat_rows()} and \code{stat_cols()} simply
filter the data frame to one of these two.

The geom layers \verb{geom_rows_*()} and \verb{geom_cols_*()} call the corresponding
stat in order to render plot elements for the corresponding factor matrix.
\verb{geom_dims_*()} selects a default matrix based on common practice, e.g.
points for rows and arrows for columns.
}

\examples{
# Regression analysis of Motor Trend design and performance data
mtcars \%>\%
  scale(scale = FALSE) \%>\%
  as.data.frame() \%>\%
  lm(formula = mpg ~ wt + cyl) \%>\%
  as_tbl_ord() \%>\%
  augment() \%>\%
  mutate_rows(influence = .wt.res^2) \%>\%
  print() -> mtcars_lm
mtcars_lm \%>\%
  ggbiplot(aes(x = wt, y = cyl, intercept = `(Intercept)`)) +
  geom_rows_point(aes(color = influence)) +
  geom_cols_vector() +
  geom_cols_isolines(axes = 1, by = 5) +
  ggtitle(
    "Weight isolines with data colored by importance",
    "Regressing mpg onto weight and number of cylinders"
  )
# Unscaled PCA and two-scaled biplot of Anderson iris data
iris[, -5] \%>\%
  princomp() \%>\%
  as_tbl_ord() \%>\%
  confer_inertia(1) \%>\%
  mutate_rows(species = iris$Species) \%>\%
  mutate_cols(measure = gsub("\\\\.", " ", tolower(names(iris)[-5]))) \%>\%
  print() -> iris_pca
iris_pca \%>\%
  ggbiplot(aes(color = species), sec.axes = "cols", scale.factor = 3) +
  theme_bw() +
  scale_color_brewer(type = "qual", palette = 2) +
  geom_rows_point() +
  geom_cols_vector(color = "#444444") +
  geom_cols_text_radiate(aes(label = measure), color = "#444444") +
  ggtitle(
    "Row-principal unscaled PCA biplot of Anderson iris data",
    "Variable loadings scaled to secondary axes"
  ) +
  expand_limits(y = c(-1, 3.5))
# Logistic SVD of Sanderson finches data
finches \%>\% t() \%>\%
  logisticSVD_ord() \%>\%
  as_tbl_ord() \%>\%
  augment() \%>\%
  print() -> finches_lsvd
finches_lsvd \%>\%
  ggbiplot(
    aes(x = LSC1, y = LSC2, label = .name),
    sec.axes = "cols", scale.factor = 100
  ) +
  geom_rows_vector(alpha = .5, color = "darkred") +
  geom_rows_text_radiate(size = 3, color = "darkred") +
  geom_cols_label(size = 3, alpha = .5, color = "royalblue3") +
  ggtitle(
    "Logistic SVD of the Galapagos island finches",
    "Islands (finches) scaled to the primary (secondary) axes"
  ) +
  expand_limits(x = c(-80, 60))
# Logistic PCA of Sanderson finches data
finches \%>\% t() \%>\%
  logisticPCA_ord() \%>\%
  as_tbl_ord() \%>\%
  augment() \%>\%
  print() -> finches_lpca
finches_lpca \%>\%
  ggbiplot(
    aes(x = LPC1, y = LPC2, label = .name),
    sec.axes = "cols", scale.factor = 50
  ) +
  geom_rows_vector(alpha = .5, color = "darkred") +
  geom_rows_text_radiate(size = 3, color = "darkred") +
  geom_cols_label(size = 3, alpha = .5, color = "royalblue3") +
  ggtitle(
    "Logistic PCA of the Galapagos island finches",
    "Islands (finches) scaled to the primary (secondary) axes"
  ) +
  expand_limits(x = c(-30, 25))
# Convex logistic PCA of Sanderson finches data
finches \%>\% t() \%>\%
  # omit finches present on every island
  {.[, ! apply(., 2, all), drop = FALSE]} \%>\%
  convexLogisticPCA_ord() \%>\%
  as_tbl_ord() \%>\%
  augment() \%>\%
  print() -> finches_clpca
finches_clpca \%>\%
  ggbiplot(
    aes(x = LPC1, y = LPC2, label = .name),
    sec.axes = "cols", scale.factor = 50
  ) +
  geom_rows_vector(alpha = .5, color = "darkred") +
  geom_rows_text_radiate(size = 3, color = "darkred") +
  geom_cols_label(size = 3, alpha = .5, color = "royalblue3") +
  ggtitle(
    "Convex logistic PCA of the Galapagos island finches",
    "Islands (finches) scaled to the primary (secondary) axes"
  ) +
  expand_limits(x = c(-25, 35))
}
\seealso{
\code{\link[ggplot2:ggplot2-package]{ggplot2::ggplot2()}}
}
